<% content_for :title, "#{@product.name} | #{@product.category.name}" %>

<div class="container mx-auto p-4">
  <% if notice.present? %>
    <div class="alert alert-success shadow-lg mb-5">
      <div>
        <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current flex-shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>
        <span><%= notice %></span>
      </div>
    </div>
  <% end %>

  <div class="card lg:card-side bg-base-100 shadow-xl">
    <figure class="p-4 lg:w-1/2 flex flex-col">
      <% if @product.image.attached? %>
        <%= image_tag @product.image.variant(resize_to_limit: [600, 600]), class: "w-full h-auto object-contain rounded-lg shadow-md", alt: @product.name %>
      <% else %>
        <div class="w-full h-[400px] lg:h-[600px] bg-gray-200 rounded-lg shadow-md flex items-center justify-center">
          <span class="text-gray-500">Image not available</span>
        </div>
      <% end %>
    </figure>

    <div class="card-body lg:w-1/2">
      <p class="text-sm text-gray-500 uppercase"><%= @product.category.name %></p>
      <h1 class="card-title text-3xl lg:text-4xl"><%= @product.name %></h1>

      <%# Price %>
      <div class="my-2">
        <span class="text-2xl lg:text-3xl font-semibold text-secondary"><%= number_to_currency @product.price %></span>
      </div>
      <p class="text-xs text-gray-600 mb-4">4 interest-free payments of <%= number_to_currency(@product.price / 4) %> with <span class="font-bold">Klarna</span>. or <span class="font-bold">afterpay</span></p>

      <%# Color Selector Placeholder %>
      <div class="mb-4">
        <h3 class="text-md font-semibold mb-2">Color: <span class="font-normal" id="selected_color_name">Black</span></h3>
        <div class="flex space-x-2">
          <button class="w-8 h-8 rounded-full bg-black border-2 border-primary ring-2 ring-primary focus:outline-none" aria-label="Black" data-color-name="Black"></button>
          <button class="w-8 h-8 rounded-full bg-white border-2 border-base-300 hover:border-neutral-focus focus:outline-none focus:ring-2 focus:ring-primary" aria-label="White" data-color-name="White"></button>
          <%# Add more dynamic colors here %>
        </div>
      </div>

      <%# Sale Banner Placeholder - if applicable %>
      <div class="p-3 bg-success-content text-success rounded-md text-sm my-4">
        <span class="font-bold">‚óè 50% Off Archive Sales.</span> Discount applied in cart.
      </div>

      <%# Quantity & Add to Cart %>
      <div class="card-actions items-center space-x-3 my-4">
        <div class="join">
          <button class="btn join-item btn-outline btn-sm" onclick="updateQuantity(-1)">-</button>
          <input type="text" id="quantity_input" value="1" class="input input-sm input-bordered join-item w-12 text-center" />
          <button class="btn join-item btn-outline btn-sm" onclick="updateQuantity(1)">+</button>
        </div>
        <button class="btn btn-primary flex-grow" id="add-to-cart-button">Add to Cart</button>
      </div>

      <%# Description %>
      <div class="collapse collapse-arrow border border-base-300 bg-base-100 rounded-box">
        <input type="checkbox" id="product_description_toggle" class="peer" />
        <div class="collapse-title text-lg font-medium peer-checked:bg-base-200">
          Description
        </div>
        <div class="collapse-content peer-checked:bg-base-200">
          <p class="pt-4 text-sm"><%= @product.description %></p>
        </div>
      </div>

      <%# JavaScript for color selector and quantity (can be moved to a JS file) %>
      <script>
        document.addEventListener('DOMContentLoaded', () => {
          const colorButtons = document.querySelectorAll('button[data-color-name]');
          const selectedColorNameDisplay = document.getElementById('selected_color_name');

          colorButtons.forEach(button => {
            button.addEventListener('click', () => {
              if (selectedColorNameDisplay) {
                selectedColorNameDisplay.textContent = button.dataset.colorName;
              }
              colorButtons.forEach(btn => {
                btn.classList.remove('border-primary', 'ring-2', 'ring-primary');
                btn.classList.add('border-base-300', 'hover:border-neutral-focus');
              });
              button.classList.remove('border-base-300', 'hover:border-neutral-focus');
              button.classList.add('border-primary', 'ring-2', 'ring-primary');
            });
          });
        });

        function updateQuantity(change) {
          const quantityInput = document.getElementById('quantity_input');
          let currentValue = parseInt(quantityInput.value);
          currentValue += change;
          if (currentValue < 1) {
            currentValue = 1;
          }
          quantityInput.value = currentValue;
        }
      </script>
    </div>
  </div>
</div>